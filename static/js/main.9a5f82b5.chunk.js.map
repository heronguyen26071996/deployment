{"version":3,"sources":["routes.js","App.js","serviceWorker.js","index.js"],"names":["Loading","LoadableLogin","Loadable","loader","loading","LoadableContact","LoadableView","LoadableEdit","routes","path","exact","main","Home","useState","expanded","setexpanded","style","setstyle","setselectKey","footer","setfooter","NavHeader","styled","div","props","NavTitle","NavSubTitle","NavFooter","console","log","window","location","pathname","split","NavInfoPane","className","render","history","Fragment","display","onToggle","onSelect","selected","to","Modal","confirm","title","icon","ExclamationCircleOutlined","content","okText","cancelText","cancelButtonProps","type","onOk","onCancel","push","Toggle","Nav","defaultSelected","eventKey","FileAddOutlined","fontSize","FolderViewOutlined","LoginOutlined","marginLeft","span","result","length","map","route","index","key","component","showRouter","Boolean","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9a5f82b5.chunk.js","sourcesContent":["import React from 'react'\r\nimport Loadable from 'react-loadable'\r\nconst Loading = () => <div>Loading...</div>\r\nconst LoadableLogin = Loadable({\r\n    loader() {\r\n        return import('./components/Login')\r\n    },\r\n    loading: Loading\r\n})\r\n\r\n\r\n\r\nconst LoadableContact = Loadable({\r\n    loader() {\r\n        return import('./components/Products')\r\n    },\r\n    loading: Loading\r\n})\r\nconst LoadableView = Loadable({\r\n    loader() {\r\n        return import('./components/Report')\r\n    },\r\n    loading: Loading\r\n})\r\nconst LoadableEdit = Loadable({\r\n    loader() {\r\n        return import('./components/Contact')\r\n    },\r\n    loading: Loading\r\n})\r\nconst routes = [\r\n    {\r\n        path: '/add',\r\n        exact: true,\r\n        main: () => <LoadableContact />\r\n    },\r\n    {\r\n        path: '/login',\r\n        exact: true,\r\n        main: () => <LoadableLogin />\r\n    }\r\n    ,\r\n    {\r\n        path: '/view',\r\n        exact: true,\r\n        main: () => <LoadableView />\r\n    }\r\n    ,\r\n    {\r\n        path: '/edt/:id',\r\n        exact: true,\r\n        main: () => <LoadableEdit />\r\n    }\r\n]\r\n\r\nexport default routes\r\n","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n// import routes from './routes'\n// function App() {\n//   let showRouter = (routes) => {\n//     var result = null;\n\n//     if (routes.length > 0) {\n//       result = routes.map((route, index) => {\n//         return (\n//           <Route\n//             key={index}\n//             path={route.path}\n//             exact={route.exact}\n//             component={route.main}\n//           />\n//         );\n//       });\n//     }\n//     return result;\n//   };\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, {  useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport SideNav, { NavItem, NavIcon, NavText } from \"@trendmicro/react-sidenav\";\nimport { Modal, message,Row,Col } from \"antd\";\nimport {\n  LoginOutlined,\n  FileAddOutlined,\n  ExclamationCircleOutlined,\n  FolderViewOutlined,\n} from \"@ant-design/icons\";\nimport styled from \"styled-components\";\nimport ClickOutside from \"react-click-outside\";\nimport \"@trendmicro/react-sidenav/dist/react-sidenav.css\";\nimport routes from \"./routes\";\nfunction Home() {\n  const [expanded, setexpanded] = useState(false);\n  const [style, setstyle] = useState(80);\n  const [selectKey,setselectKey]=useState('add');\n  const [footer,setfooter]=useState('none');\n  let showRouter = (routes) => {\n    var result = null;\n\n    if (routes.length > 0) {\n      result = routes.map((route, index) => {\n        return (\n          <Route\n            key={index}\n            path={route.path}\n            exact={route.exact}\n            component={route.main}\n          />\n        );\n      });\n    }\n    return result;\n  };\n\n  const NavHeader = styled.div`\n    display: ${(props) => (props.expanded ? \"block\" : \"none\")};\n    white-space: nowrap;\n    background-color: #225cc3;\n    color: #fff;\n\n    > * {\n      color: inherit;\n      background-color: inherit;\n    }\n  `;\n\n  // height: 20px + 10px + 10px = 40px\n  const NavTitle = styled.div`\n    font-size: 1.5em;\n    line-height: 20px;\n    padding: 10px 0;\n  `;\n\n  // height: 20px + 4px = 24px;\n  const NavSubTitle = styled.div`\n    font-size: 1em;\n    line-height: 20px;\n    padding-bottom: 4px;\n  `;\n  const NavFooter = styled.div`\n   font-size: 1.2em;\n    line-height: 20px;\n  position: fixed;\n  margin-bottom: 10px;\n    margin-left: 70px;\n  bottom: 0;\n  display:${footer}\n`;\nconsole.log(window.location.pathname.split('/')[1])\n  const NavInfoPane = styled.div`\n    float: left;\n    width: 100%;\n    padding: 10px 20px;\n    background-color: #225cc3;\n  `;\n\n \n  function cancel(e) {\n    console.log(e);\n    message.error(\"Click on No\");\n  }\n  function confirm() {\n    Modal.confirm({\n      title: \"Đăng xuất\",\n      icon: <ExclamationCircleOutlined />,\n      content: \"Bạn có muốn đăng xuất hay không ? ...\",\n      okText: \"Có\",\n      cancelText: \"Không\",\n      cancelButtonProps: { type: \"danger\" },\n      onOk() {\n       window.location.pathname='/login'\n      },\n      onCancel() {\n      },\n    });\n  }\n  return (\n    <div className=\"dvModal\">\n      {/* <ClickOutside\n        onClickOutside={() => {\n          setexpanded(false);\n          setstyle(80);\n        }}\n      > */}\n        <Router>\n          <Route\n            render={({ location, history }) => (\n              <React.Fragment>\n                <SideNav\n                  style={{\n                    display:\n                      window.location.pathname == \"/login\" ? \"none\" : \"block\",\n                  }}\n                  expanded={expanded}\n                  onToggle={(expanded) => {\n                    setexpanded(expanded);\n                    if (expanded) {\n                      setfooter('block')\n                      setstyle(250);\n                    } else {\n                      setfooter('none')\n                      setstyle(80);\n                    }\n                  }}\n                  onSelect={(selected) => {\n                 setselectKey(selected);\n                 console.log(selected)\n                    const to = \"/\" + selected;\n                    if(selected==='login')\n                    {\n                      confirm();\n                    }\n                    if (location.pathname !== to && selected!='login') {\n                      history.push(to);\n                    }\n                  }}\n                >\n                  <SideNav.Toggle />\n                  <NavHeader expanded={expanded}>\n                    <NavTitle>Side Navigation</NavTitle>\n                    <NavSubTitle>Styled Side Navigation</NavSubTitle>\n                  </NavHeader>\n                  {expanded && (\n                    <NavInfoPane>\n                     \n                    </NavInfoPane>\n                  )}\n                  <NavFooter>Version 2020</NavFooter>\n                  <SideNav.Nav defaultSelected={window.location.pathname.split('/')[1]}>\n                    <NavItem eventKey=\"add\">\n                      <NavIcon>\n                        <FileAddOutlined style={{ fontSize: \"1.25em\" }} />\n                      </NavIcon>\n                      <NavText>Thêm báo cáo công việc</NavText>\n                    </NavItem>\n                    <NavItem eventKey=\"view\">\n                      <NavIcon>\n                        <FolderViewOutlined style={{ fontSize: \"1.25em\" }} />\n                      </NavIcon>\n                      <NavText>Xem báo cáo công việc</NavText>\n                    </NavItem>\n\n                    <NavItem eventKey=\"login\">\n                      <NavIcon>\n                        <LoginOutlined style={{ fontSize: \"1.25em\" }} />\n                      </NavIcon>\n                      <NavText>Đăng xuất</NavText>\n                    </NavItem>\n                  </SideNav.Nav>\n                \n                </SideNav>\n                {\" \"}\n                <main  style={{marginLeft:style}}>\n                  <Row>\n                    <Col span={24}>\n                      \n                    </Col>\n                  </Row>\n                  {showRouter(routes)}\n                </main>\n              </React.Fragment>\n            )}\n          />\n        </Router>\n    </div>\n  );\n}\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}